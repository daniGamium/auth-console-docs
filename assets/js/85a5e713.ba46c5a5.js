"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[8346],{49613:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var o=n(59496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),u=a,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||r;return n?o.createElement(h,i(i({ref:t},p),{},{components:n})):o.createElement(h,i({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<r;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2766:function(e,t,n){n.r(t),n.d(t,{assets:function(){return v},contentTitle:function(){return g},default:function(){return w},frontMatter:function(){return f},metadata:function(){return y},toc:function(){return N}});var o=n(665),a=n(40151),r=(n(59496),n(49613)),i=["components"],c={toc:[]};function s(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Native"),": Connectors that ONLY work for native mobile apps."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Web"),": Connectors work ONLY on desktop web applications."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Universal"),": Connectors can work on both mobile web apps and desktop web apps.")))}s.isMDXComponent=!0;var l=["components"],p={toc:[]};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Local storage"),", also known as ",(0,r.kt)("a",{parentName:"li",href:"/docs/references/connectors/#connectors-remote-storage-connector-db"},(0,r.kt)("em",{parentName:"a"},"ConnectorMetadata")),", is an object containing fixed properties such as logo, connector type, and so on. (\ud83e\uddd0 Having trouble understanding these properties? No worry, a detailed explanation comes later!)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Remote storage")," is stored in DB for the sake of relatively frequent changes on those data.")))}m.isMDXComponent=!0;var d=["components"],u={toc:[]};function h(e){var t=e.components,n=(0,a.Z)(e,d);return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Social"),": Connectors that can access user information from arbitrary third-party social media with end-users authorization."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"SMS"),": Connectors enable end-users to receive text messages on their phones."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Email"),": Connectors that can help send emails to end-users.")))}h.isMDXComponent=!0;var k=["components"],f={},g="\ud83d\udd0c Connectors",y={unversionedId:"docs/references/connectors/README",id:"docs/references/connectors/README",title:"\ud83d\udd0c Connectors",description:"Introduction",source:"@site/docs/docs/references/connectors/README.mdx",sourceDirName:"docs/references/connectors",slug:"/docs/references/connectors/",permalink:"/docs/references/connectors/",draft:!1,editUrl:"https://github.com/gamiumapp/auth-console-docs/docs/docs/references/connectors/README.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"\ud83d\udcf1 Applications",permalink:"/docs/references/applications/"},next:{title:"\ud83e\uddf1 Core Service",permalink:"/docs/references/core/"}},v={},N=[{value:"Introduction",id:"introduction",level:2},{value:"What is a connector?",id:"what-is-a-connector",level:3},{value:"Compositions",id:"compositions",level:2},{value:"Connector&#39;s local storage: <em>ConnectorMetadata</em>",id:"connectors-local-storage-connectormetadata",level:2},{value:"id",id:"id",level:3},{value:"target",id:"target",level:3},{value:"type",id:"type",level:3},{value:"platform",id:"platform",level:3},{value:"name",id:"name",level:3},{value:"description",id:"description",level:3},{value:"logo",id:"logo",level:3},{value:"logoDark",id:"logodark",level:3},{value:"isStandard",id:"isstandard",level:3},{value:"readme",id:"readme",level:3},{value:"configTemplate",id:"configtemplate",level:3},{value:"Connector&#39;s remote storage: <em>Connector DB</em>",id:"connectors-remote-storage-connector-db",level:2},{value:"id",id:"id-1",level:3},{value:"connectorId",id:"connectorid",level:3},{value:"metadata",id:"metadata",level:3},{value:"syncProfile",id:"syncprofile",level:3},{value:"config",id:"config",level:3},{value:"createdAt",id:"createdat",level:3}],b={toc:N};function w(e){var t=e.components,n=(0,a.Z)(e,k);return(0,r.kt)("wrapper",(0,o.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-connectors"},"\ud83d\udd0c Connectors"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("h3",{id:"what-is-a-connector"},"What is a connector?"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Connectors")," play a critical role in Logto. With their help, Logto enables end-users to use passwordless registration or sign-in and the capabilities of signing in with social accounts. With the increasing popularity of websites and applications, passwordless and social sign-ins allow users to avoid managing numerous accounts and passwords."),(0,r.kt)("p",null,'\ud83d\ude2f Sounds fascinating, uh? See "',(0,r.kt)("a",{parentName:"p",href:"/docs/recipes/configure-connectors/"},"Configure connectors"),'" if you want to set up an existing connector. If you can not find the connector you want to set up, you may develop those connectors by following the guides in "',(0,r.kt)("a",{parentName:"p",href:"/docs/recipes/create-your-connector/"},"Create your connector"),'".'),(0,r.kt)("h2",{id:"compositions"},"Compositions"),(0,r.kt)("p",null,"There are lots of properties in connector data."),(0,r.kt)("p",null,"To make the data loading and updating more efficient, we store part of connector data which will be modified frequently to DB and the rest of that locally."),(0,r.kt)(m,{mdxType:"ConnectorStorageIntro"}),(0,r.kt)("h2",{id:"connectors-local-storage-connectormetadata"},"Connector's local storage: ",(0,r.kt)("em",{parentName:"h2"},"ConnectorMetadata")),(0,r.kt)("h3",{id:"id"},"id"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"id")," is an ",(0,r.kt)("em",{parentName:"p"},"unique")," string-typed key to identify a connector in Logto."),(0,r.kt)("p",null,"It's assigned by the developers of each connector and will be uploaded to DB."),(0,r.kt)("h3",{id:"target"},"target"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"target")," is a lowercase string to distinguish the social identities source of the social connector."),(0,r.kt)("p",null,"For example, your ",(0,r.kt)("em",{parentName:"p"},"target")," should be ",(0,r.kt)("em",{parentName:"p"},"google")," if you sign in to Logto with your google account. The value of ",(0,r.kt)("em",{parentName:"p"},"target")," can be an arbitrary non-empty string, but we encourage you to keep it straightforward since you can not change it. We DO NOT allow the existence of multiple connectors with the same ",(0,r.kt)("em",{parentName:"p"},"target")," and platform. On the other hand, you can have social connectors for different platforms sharing the same ",(0,r.kt)("em",{parentName:"p"},"target"),". For example, if users want to log in via ",(0,r.kt)("em",{parentName:"p"},"WeChat")," on their phone, a native ",(0,r.kt)("em",{parentName:"p"},"WeChat")," app is required per ",(0,r.kt)("em",{parentName:"p"},"WeChat"),"\u2019s TOU; at the same time, a web ",(0,r.kt)("em",{parentName:"p"},"WeChat")," app is also needed to enable log in to web applications. These two ",(0,r.kt)("em",{parentName:"p"},"WeChat")," apps share the same identity provider and should have the same target."),(0,r.kt)("h3",{id:"type"},"type"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"type")," is the property that record the type of the connector."),(0,r.kt)("p",null,"We define the connectors into three different types, based on their functionalities:"),(0,r.kt)(h,{mdxType:"ConnectorTypeIntro"}),(0,r.kt)("h3",{id:"platform"},"platform"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"platform")," is used to identify which platform the connector is built for."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"platform")," should be either ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," or one of the following string-typed values:"),(0,r.kt)(s,{mdxType:"ConnectorPlatformIntro"}),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("em",{parentName:"p"},"platform")," of ",(0,r.kt)("em",{parentName:"p"},"Email Connectors")," and ",(0,r.kt)("em",{parentName:"p"},"SMS Connectors")," should always be ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),".",(0,r.kt)("br",null),"\nONLY ",(0,r.kt)("em",{parentName:"p"},"Social Connectors")," can have non-NULL ",(0,r.kt)("em",{parentName:"p"},"platform")," values.")),(0,r.kt)("h3",{id:"name"},"name"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"name")," is an object whose keys are i18n country codes and values are connectors' display name."),(0,r.kt)("h3",{id:"description"},"description"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"description")," is also an object whose keys are i18n country codes and values are brief connector descriptions."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"To support i18n display at the client-side, we store the ",(0,r.kt)("em",{parentName:"p"},"name")," (as well as ",(0,r.kt)("em",{parentName:"p"},"description"),") props as a map, which uses country codes as its' key, name (or description) in local characters as the value.")),(0,r.kt)("h3",{id:"logo"},"logo"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"logo")," is an URL or relative path of connector's logo."),(0,r.kt)("h3",{id:"logodark"},"logoDark"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"logoDark")," is a ",(0,r.kt)("em",{parentName:"p"},"nullable")," URL or relative path of connector's dark mode logo."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("em",{parentName:"p"},"logo")," is always required, and ",(0,r.kt)("em",{parentName:"p"},"logoDark")," is optional."),(0,r.kt)("p",{parentName:"admonition"},"We display ",(0,r.kt)("em",{parentName:"p"},"logo")," in light mode and ",(0,r.kt)("em",{parentName:"p"},"logoDark")," in dark mode if it exists. Otherwise will fall back to show ",(0,r.kt)("em",{parentName:"p"},"logo")," in dark mode.")),(0,r.kt)("h3",{id:"isstandard"},"isStandard"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"isStandard"),' is an OPTIONAL boolean attribute to identify whether the social connector is a "standard" connector.'),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},'Logto only supports "standard" social connectors. That is to say, all Logto\'s Sms or Email connectors are NOT "standard".'),(0,r.kt)("p",{parentName:"admonition"},'Logto call connectors built upon open and standard protocols (e.g., OAuth, OIDC, SAML, etc.) as "standard" connectors. Logto\'s users are expected to construct multiple instances on each standard connector based on this context. For example, suppose that Logto has already provided an OAuth standard connector, users can build "OAuth GitHub connector", "OAuth Google connector" and "OAuth Facebook connector" instances. They are all based on the Logto OAuth standard connector.'),(0,r.kt)("p",{parentName:"admonition"},'If you are familiar with Logto\'s connector design, at most ONE Sms or Email connector can exist at the same time, which means Logto do not need "standard" Sms or Email connectors at the current stage.')),(0,r.kt)("h3",{id:"readme"},"readme"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"readme")," is a relative path of the connector's README markdown file whose contexts will show up in \"Admin Console\" during connectors' set-up."),(0,r.kt)("h3",{id:"configtemplate"},"configTemplate"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"configTemplate")," is a relative path of the connector's configuration example."),(0,r.kt)("h2",{id:"connectors-remote-storage-connector-db"},"Connector's remote storage: ",(0,r.kt)("em",{parentName:"h2"},"Connector DB")),(0,r.kt)("h3",{id:"id-1"},"id"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"id")," is an randomly generated string-typed key to identify connector in DB."),(0,r.kt)("h3",{id:"connectorid"},"connectorId"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"connectorId")," is a string-typed key and is the ONLY bridge to align ",(0,r.kt)("em",{parentName:"p"},"Connector DB")," and ",(0,r.kt)("em",{parentName:"p"},"ConnectorMetadata"),". For each matched connector DB data and connector code module pair, ",(0,r.kt)("em",{parentName:"p"},"connectorId")," always equals to ",(0,r.kt)("a",{parentName:"p",href:"#id"},"metadata.",(0,r.kt)("em",{parentName:"a"},"id"))," of the code module."),(0,r.kt)("h3",{id:"metadata"},"metadata"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"metadata")," is a subset of ",(0,r.kt)("a",{parentName:"p",href:"#connectors-local-storage-connectormetadata"},"ConnectorMetadata"),", which contains configurable attributes i.e. ",(0,r.kt)("a",{parentName:"p",href:"#logo"},(0,r.kt)("em",{parentName:"a"},"logo")),", ",(0,r.kt)("a",{parentName:"p",href:"#logodark"},(0,r.kt)("em",{parentName:"a"},"logoDark")),", ",(0,r.kt)("a",{parentName:"p",href:"#target"},(0,r.kt)("em",{parentName:"a"},"target"))," and ",(0,r.kt)("a",{parentName:"p",href:"#name"},(0,r.kt)("em",{parentName:"a"},"name")),"."),(0,r.kt)("h3",{id:"syncprofile"},"syncProfile"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"syncProfile")," is a boolean value to determine the user profile updating scheme, default to be FALSE."),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"syncProfile")," is FALSE, the Logto user's basic information (including name and avatar) will be updated only when the user first signs up to Logto via this connector. Otherwise, every time users sign in to Logto through the connector, the Logto account profile will be updated."),(0,r.kt)("h3",{id:"config"},"config"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"config")," could be an arbitrary non-empty object."),(0,r.kt)("p",null,"It is where a connector store its configuration. Each connector have different properties in ",(0,r.kt)("em",{parentName:"p"},"config"),' and it obligated to be valid (connectors have different standard for "valid".) before being saved to DB. ONLY those ',(0,r.kt)("em",{parentName:"p"},"config")," passed validity check can be updated to DB, or there would throw an error."),(0,r.kt)("p",null,"Developers are required to implement a ",(0,r.kt)("em",{parentName:"p"},"config"),' guard when developing their own connectors, see "',(0,r.kt)("a",{parentName:"p",href:"/docs/recipes/create-your-connector/"},"Create your connector"),'" for more details.'),(0,r.kt)("p",null,"Want to have a glance at ",(0,r.kt)("em",{parentName:"p"},"config"),' samples? Go to "',(0,r.kt)("a",{parentName:"p",href:"/docs/recipes/configure-connectors/"},"Configure connectors"),"\" or each connector's settings page."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"In current Logto version, only one ",(0,r.kt)("em",{parentName:"p"},"Sms/Email")," connector can exist at the same time, all other connectors with same type are automatically deleted."),(0,r.kt)("p",{parentName:"admonition"},"The rule, unique working SMS or Email connector, is not applicable to ",(0,r.kt)("em",{parentName:"p"},"Social")," connectors.",(0,r.kt)("br",null),"\nIn other words, you can add multiple ",(0,r.kt)("em",{parentName:"p"},"Social")," connectors.")),(0,r.kt)("h3",{id:"createdat"},"createdAt"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"createdAt")," is an auto-generated timestamp string to track the time when a connector is created in DB."))}w.isMDXComponent=!0}}]);