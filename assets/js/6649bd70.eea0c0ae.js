"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[2101],{49613:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return u}});var o=t(59496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),p=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(l.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),u=a,k=d["".concat(l,".").concat(u)]||d[u]||h[u]||r;return t?o.createElement(k,i(i({ref:n},c),{},{components:t})):o.createElement(k,i({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},12551:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return h}});var o=t(665),a=t(40151),r=(t(59496),t(49613)),i=["components"],s={sidebar_position:7.2},l="\ud83e\ude9d Web hooks",p={unversionedId:"docs/recipes/web-hooks/README",id:"docs/recipes/web-hooks/README",title:"\ud83e\ude9d Web hooks",description:"Overview",source:"@site/docs/docs/recipes/web-hooks/README.md",sourceDirName:"docs/recipes/web-hooks",slug:"/docs/recipes/web-hooks/",permalink:"/docs/recipes/web-hooks/",draft:!1,editUrl:"https://github.com/gamiumapp/auth-console-docs/docs/docs/recipes/web-hooks/README.md",tags:[],version:"current",sidebarPosition:7.2,frontMatter:{sidebar_position:7.2},sidebar:"docsSidebar",previous:{title:"\ud83d\udc64 User Profiles",permalink:"/docs/recipes/user-profile/"},next:{title:"\ud83c\udf10 Localization",permalink:"/docs/recipes/localization/"}},c={},h=[{value:"Overview",id:"overview",level:2},{value:"Terms",id:"terms",level:2},{value:"Hook event",id:"hook-event",level:3},{value:"Hook",id:"hook",level:3},{value:"Web hook",id:"web-hook",level:3},{value:"Manage web hooks",id:"manage-web-hooks",level:2},{value:"Create a hook",id:"create-a-hook",level:3},{value:"Query hooks",id:"query-hooks",level:3},{value:"Update a hook",id:"update-a-hook",level:3},{value:"Delete a hook",id:"delete-a-hook",level:3},{value:"Web hook request",id:"web-hook-request",level:2}],d={toc:h};function u(e){var n=e.components,t=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-web-hooks"},"\ud83e\ude9d Web hooks"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"With web hooks, Logto can enable the next level extensibility for developers to interact with other services in an event-based manner."),(0,r.kt)("h2",{id:"terms"},"Terms"),(0,r.kt)("h3",{id:"hook-event"},"Hook event"),(0,r.kt)("p",null,"When a specific action is done, it will trigger a hook event with a specific type. E.g. Logto will emit a ",(0,r.kt)("inlineCode",{parentName:"p"},"PostSignUp")," hook event when user finished the sign-up process and created a new account."),(0,r.kt)("h3",{id:"hook"},"Hook"),(0,r.kt)("p",null,"A single or series of actions that hook to a specific event. Action can be calling API, executing code snippet, etc."),(0,r.kt)("h3",{id:"web-hook"},"Web hook"),(0,r.kt)("p",null,"A subtype of hook that indicates calling an API with the event payload."),(0,r.kt)("p",null,"Say a developer wants to send a notification when user signs in via a new device, the developer can add a web hook that calls his security service API to the ",(0,r.kt)("inlineCode",{parentName:"p"},"PostSignIn")," event."),(0,r.kt)("p",null,"Here's an example of enabling two web hooks for ",(0,r.kt)("inlineCode",{parentName:"p"},"PostSignIn")," event in Logto:"),(0,r.kt)("mermaid",{value:"graph LR\n  subgraph Logto\n    SF(Sign-in finished)\n    PS(Post sign-in)\n    WH2(Web hook 2)\n    WH1(Web hook 1)\n  end\n\n  subgraph Service 2\n    E2(Endpoint)\n  end\n\n  subgraph Service 1\n    E1(Endpoint)\n  end\n\n  SF --\x3e|Trigger| PS\n  PS --\x3e WH1\n  PS --\x3e WH2\n  WH1 ---\x3e|POST API call| E1\n  WH2 ---\x3e|POST API call| E2"}),(0,r.kt)("h2",{id:"manage-web-hooks"},"Manage web hooks"),(0,r.kt)("p",null,"For now, Logto only supports web hooks and managing them via Management API. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/recipes/interact-with-management-api/"},"\ud83d\ude9d Interact with Management API")," for detailed instructions."),(0,r.kt)("p",null,"Standard REST APIs are available to manage hooks:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"POST /api/hooks\nGET /api/hooks\nGET /api/hooks/:id\nPATCH /api/hooks/:id\nPUT /api/hooks/:id\nDELETE /api/hooks/:id\n")),(0,r.kt)("p",null,"Except ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /api/hooks")," will return an array of hook entities and ",(0,r.kt)("inlineCode",{parentName:"p"},"DELETE /api/hooks/:id")," will return no content, other APIs will return a hook entity in the response body."),(0,r.kt)("p",null,"The full definition of a hook entity:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type Hook = {\n  id: string;\n  /** The event to trigger the hook. */\n  event: HookEvent;\n  config: HookConfig;\n  createdAt: Date;\n};\n\nenum HookEvent {\n  PostRegister = 'PostRegister',\n  PostSignIn = 'PostSignIn',\n  PostResetPassword = 'PostResetPassword',\n}\n\ntype HookConfig = {\n  /** The URL to send the request, method fixed to `POST`. */\n  url: string;\n  /** Additional headers that attach to the request. */\n  headers?: Record<string, string>;\n  /**\n   * Retry times when hook response status >= 500.\n   *\n   * Must be less than or equal to `3`. Use `0` to disable retry.\n   **/\n  retries: number;\n};\n")),(0,r.kt)("p",null,"Every hook request carries two default headers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"user-agent")," with predefined value"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"content-type: application/json"))),(0,r.kt)("p",null,"You can overwrite them by passing ",(0,r.kt)("inlineCode",{parentName:"p"},"headers")," with the same key."),(0,r.kt)("h3",{id:"create-a-hook"},"Create a hook"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"POST /api/hooks")," to create a hook. Only ",(0,r.kt)("inlineCode",{parentName:"p"},"event")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," is required. E.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --location  \\\n  --request POST \'https://<your-logto-endpoint>/api/hooks\' \\\n  --header \'Authorization: Bearer eyJhbGciOiJS...\' \\\n  --header \'Content-Type: application/json\' \\\n  --data-raw \'{\n    "event": "PostSignIn",\n    "config": {\n      "url": "https://another.service.endpoint/path/to/api",\n      "retries": 3\n    }\n  }\'\n')),(0,r.kt)("h3",{id:"query-hooks"},"Query hooks"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /api/hooks")," to fetch all hooks, or ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /api/hooks/:id")," to fetch a single hook. E.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Fetch a single hook\ncurl --location\n  --request GET 'https://<your-logto-endpoint>/api/hooks/2UT84OTmf9tT4F5vMhBnZ' \\\n  --header 'Authorization: Bearer eyJhbGciOiJS...'\n")),(0,r.kt)("h3",{id:"update-a-hook"},"Update a hook"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"PUT /api/hooks/:id")," to perform data replacement or ",(0,r.kt)("inlineCode",{parentName:"p"},"PATCH /api/hooks/:id")," to update data partially. E.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Partial update\ncurl --location  \\\n  --request PATCH 'https://<your-logto-endpoint>/api/hooks/2UT84OTmf9tT4F5vMhBnZ' \\\n  --header 'Authorization: Bearer eyJhbGciOiJS...' \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n    \"event\": \"PostRegister\"\n  }'\n")),(0,r.kt)("h3",{id:"delete-a-hook"},"Delete a hook"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"DELETE /api/hooks/:id")," to delete an existing hook."),(0,r.kt)("h2",{id:"web-hook-request"},"Web hook request"),(0,r.kt)("p",null,"Once a valid hook event is emitted, Logto will find corresponding web hooks and send a ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," request per hook config with the following JSON schema in the request body:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type HookEventPayload = {\n  /** The identifier in Logto. */\n  hookId: string;\n  /** Which event that triggers this hook. */\n  event: HookEvent;\n  /** The create time of payload in ISO format. */\n  createdAt: string;\n  /** The Session ID (not Interaction ID) for this event, if applicable. */\n  sessionId?: string;\n  /** The user-agent for the request that triggers this hook. */\n  userAgent?: string;\n  /** The related User ID for this event, if applicable. */\n  userId?: string;\n  /** The related user entity for this event, if applicable. */\n  user?: UserEntity;\n  /** The related application info for this event, if applicable. */\n  application?: Pick<Application, 'id' | 'type' | 'name' | 'description'>;\n};\n")),(0,r.kt)("p",null,"We pick the following fields from user data and compose them into ",(0,r.kt)("inlineCode",{parentName:"p"},"UserEntity"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const fields = [\n  'id',\n  'username',\n  'primaryEmail',\n  'primaryPhone',\n  'name',\n  'avatar',\n  'roleNames',\n  'customData',\n  'identities',\n  'lastSignInAt',\n  'createdAt',\n  'applicationId',\n  'isSuspended',\n];\n")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/references/users/"},"Users")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/references/applications/"},"Applications")," reference for detailed field explanations."))}u.isMDXComponent=!0}}]);