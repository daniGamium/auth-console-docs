"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[2696],{49613:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var r=n(59496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),u=a,k=c["".concat(l,".").concat(u)]||c[u]||m[u]||i;return n?r.createElement(k,o(o({ref:t},d),{},{components:n})):r.createElement(k,o({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},12127:function(e,t,n){n.r(t),n.d(t,{assets:function(){return k},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return m},metadata:function(){return u},toc:function(){return h}});var r=n(665),a=n(40151),i=(n(59496),n(49613)),o=n.p+"assets/images/bookstore-roles-0b0ab0165df2b97cd953c522b9634dc8.png",s=n.p+"assets/images/bookstore-setup-2ecd9416e0a72b8af773c79ed5d213df.png",l=n.p+"assets/images/permissions-130d7c9cd4ec9f6f55b810deadacc754.png",p=n.p+"assets/images/role-order-admin-a8c318597a9cc8929f3028cf2f4ca765.png",d=["components"],m={sidebar_position:7.1},c="\ud83d\udd10 RBAC (Role Based Access Control)",u={unversionedId:"docs/recipes/rbac/README",id:"docs/recipes/rbac/README",title:"\ud83d\udd10 RBAC (Role Based Access Control)",description:"RBAC has not been released yet.",source:"@site/docs/docs/recipes/rbac/README.mdx",sourceDirName:"docs/recipes/rbac",slug:"/docs/recipes/rbac/",permalink:"/zh-cn/docs/recipes/rbac/",draft:!1,editUrl:"https://github.com/gamiumapp/auth-console-docs/docs/docs/recipes/rbac/README.mdx",tags:[],version:"current",sidebarPosition:7.1,frontMatter:{sidebar_position:7.1},sidebar:"docsSidebar",previous:{title:"Advanced user search",permalink:"/zh-cn/docs/recipes/interact-with-management-api/advanced-user-search"},next:{title:"Manage permissions and roles",permalink:"/zh-cn/docs/recipes/rbac/manage-permissions-and-roles"}},k={},h=[{value:"Intro",id:"intro",level:2},{value:"RBAC in Logto",id:"rbac-in-logto",level:2},{value:"Permissions (Scopes)",id:"permissions-scopes",level:3},{value:"Roles",id:"roles",level:3},{value:"Example: An online bookstore",id:"example-an-online-bookstore",level:2},{value:"Recap",id:"recap",level:2}],f={toc:h};function g(e){var t=e.components,n=(0,a.Z)(e,d);return(0,i.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"-rbac-role-based-access-control"},"\ud83d\udd10 RBAC (Role Based Access Control)"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"RBAC has not been released yet.")),(0,i.kt)("h2",{id:"intro"},"Intro"),(0,i.kt)("p",null,"RBAC (Role-based access control) is a method of assigning permissions to users based on their roles. By controlling access to resources through role authorization, RBAC can help in different perspectives:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"Improved security"))," By assigning permissions based on roles, RBAC limits access to resources only to those who need it. This reduces the risk of unauthorized access and data breaches."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"Greater efficiency"))," RBAC allows for quick and easy addition and modification of roles and permissions and implementing them across APIs, making it easy to manage access rights for large numbers of users."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"Reduced administrative overhead"))," RBAC eliminates the need for manual assignment of permissions and reduces the potential errors."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"Better compliance"))," RBAC can help organizations comply with regulatory and statutory requirements for confidentiality and privacy by ensuring that only authorized users have access to sensitive data."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"Flexibility"))," RBAC can be easily customized and adapted to suit the specific needs of an organization, making it a versatile access control method."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"Scalability"))," RBAC can be implemented in an organization of any size, from small businesses to large enterprises, and can be easily scaled up or down as necessary.")),(0,i.kt)("h2",{id:"rbac-in-logto"},"RBAC in Logto"),(0,i.kt)("p",null,"In Logto, we have implemented RBAC using the most standard and scalable method, allowing for a wide range of scenarios. To understand how it works, it's important to familiarize yourself with key terms:"),(0,i.kt)("h3",{id:"permissions-scopes"},"Permissions (Scopes)"),(0,i.kt)("p",null,"Permission refers to the authorization to access a resource (we call it ",(0,i.kt)("a",{parentName:"p",href:"/docs/references/resources/"},"API Resource"),"). In the real world, entities such as orders, products, and documents can be designated as resources, and various actions can be assigned."),(0,i.kt)("admonition",{title:"note",type:"info"},(0,i.kt)("p",{parentName:"admonition"},'"Permission" is identical to "scope" in ',(0,i.kt)("a",{parentName:"p",href:"https://oauth.net/2/scope/"},"OAuth 2.0"),'. We use the word "permission" in Admin Console since it\'s more intuitive for business.')),(0,i.kt)("p",null,"Examples of permissions, including the ability to edit an order, read a document, and delete a product, are as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"write:orders")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"read:documents")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delete:products"))),(0,i.kt)("p",null,"In Logto, a permission ",(0,i.kt)("strong",{parentName:"p"},"ALWAYS")," belongs to an API Resource."),(0,i.kt)("img",{width:"500",src:l,alt:"Permissions"}),(0,i.kt)("p",null,"The above figure shows the permission ",(0,i.kt)("inlineCode",{parentName:"p"},"read:item")," in resource ",(0,i.kt)("inlineCode",{parentName:"p"},"https://api-1.store.io")," is different from the permission ",(0,i.kt)("inlineCode",{parentName:"p"},"read:item")," in resource ",(0,i.kt)("inlineCode",{parentName:"p"},"https://api-2.store.io"),"."),(0,i.kt)("p",null,'If no API Resource is provided, permission will be treated as "for OIDC". Usually this is not what you want in RBAC.'),(0,i.kt)("h3",{id:"roles"},"Roles"),(0,i.kt)("p",null,"Roles are ",(0,i.kt)("em",{parentName:"p"},"a grouping of permissions")," that can be assigned to users. They also provide a way to aggregate permissions defined for different APIs, making adding, removing, or adjusting permissions more efficient than assigning them individually to users."),(0,i.kt)("p",null,"Here's an example of an ",(0,i.kt)("inlineCode",{parentName:"p"},"order_admin")," role with several permissions for two resources:"),(0,i.kt)("img",{width:"550",src:p,alt:"Role order_admin"}),(0,i.kt)("p",null,"Also, it's OK to have permission overlap between roles."),(0,i.kt)("h2",{id:"example-an-online-bookstore"},"Example: An online bookstore"),(0,i.kt)("p",null,"Let's say you have an online bookstore to manage. Here, we greatly simplify the access control model for demonstration purpose."),(0,i.kt)("p",null,"The model is divided to two major API Resources: orders and products. They have different resource indicators as below:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Orders: ",(0,i.kt)("inlineCode",{parentName:"li"},"https://api.store.io/orders")),(0,i.kt)("li",{parentName:"ul"},"Products: ",(0,i.kt)("inlineCode",{parentName:"li"},"https://api.store.io/products"))),(0,i.kt)("p",null,"For each resource, you'd like to separate permissions into read, write, and delete. So you define six permissions in total:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"https://api.store.io/orders"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Permission ",(0,i.kt)("inlineCode",{parentName:"li"},"read:order")),(0,i.kt)("li",{parentName:"ul"},"Permission ",(0,i.kt)("inlineCode",{parentName:"li"},"write:order")),(0,i.kt)("li",{parentName:"ul"},"Permission ",(0,i.kt)("inlineCode",{parentName:"li"},"delete:order")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"https://api.store.io/products"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Permission ",(0,i.kt)("inlineCode",{parentName:"li"},"read:product")),(0,i.kt)("li",{parentName:"ul"},"Permission ",(0,i.kt)("inlineCode",{parentName:"li"},"write:product")),(0,i.kt)("li",{parentName:"ul"},"Permission ",(0,i.kt)("inlineCode",{parentName:"li"},"delete:product"))))),(0,i.kt)("p",null,"Here's the illustration of this model:"),(0,i.kt)("img",{width:"500",src:s,alt:"Bookstore setup"}),(0,i.kt)("p",null,"You want to have two types of admin, order admin and product admin:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"Order admin"))," can manage orders and see products (as orders consist of products), but cannot manage products."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"Product admin"))," can manage products, and they should not be aware of any orders.")),(0,i.kt)("p",null,"So you create two roles, ",(0,i.kt)("inlineCode",{parentName:"p"},"order_admin")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"product_admin"),", with the permissions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"order_admin"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"https://api.store.io/orders"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"read:order"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"write:order"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"delete:order")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"https://api.store.io/products"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"read:product")))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"product_admin"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"https://api.store.io/products"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"read:product"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"write:product"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"delete:product"))))))),(0,i.kt)("p",null,"Here's the illustration of these two roles:"),(0,i.kt)("img",{width:"800",src:o,alt:"Bookstore roles"}),(0,i.kt)("p",null,"It's OK to assign both ",(0,i.kt)("inlineCode",{parentName:"p"},"order_admin")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"product_admin")," to a user, then they will have all six permissions you just defined."),(0,i.kt)("p",null,"Note the order admin shares the permission ",(0,i.kt)("inlineCode",{parentName:"p"},"read:product")," with the product admin, and the final permissions that a user holds is the union of all permissions from the roles they has been assigned."),(0,i.kt)("h2",{id:"recap"},"Recap"),(0,i.kt)("p",null,"We introduced two new terms: permission and role. To summarize:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"An API resource can hold multiple permissions."),(0,i.kt)("li",{parentName:"ul"},'When we talk about a permission, we are actually talking about "a permission of an API Resource".'),(0,i.kt)("li",{parentName:"ul"},"A role is a group of permissions.")))}g.isMDXComponent=!0}}]);